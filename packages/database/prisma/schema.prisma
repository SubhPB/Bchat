// Byimaan

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma" // not require
}


model User {
  id String  @id @default(uuid())
  name String
  email String @unique
  emailVerified Boolean? @default(false)
  password String? 
  image String?
  firstName String?
  lastName String?
  isActive Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts      Account[]
  passwordTokens ResetPasswordToken[]

  // This field represents the contacts where the user is the contact.
  contacts Contact[] @relation("UserContact")

  // Represents who are other users who saved this user as contact
  contactedBy Contact[] @relation("UserContactedBy")


  // It is one-to-one relation because one user can only be represented as one participant.
  participantId String? @unique
  particitpant Participant? @relation("OneUserIsOneParticipant")
}

model Contact {
  id String @id @default(uuid())
  userId String
  // User can set a custom name to his/her friend by default it will be User['name']
  name String
  // We could also add firstname or lastname but just 'name' field is good enough
  // In the future we may switch to enums such as status : BLOCKED | ACCEPTED if multiple functionalities will be needed to implement
  isBlocked Boolean @default(false)
  createdAt DateTime @default(now())

  contactId String

  // This is the user who is the contact.
  contact User @relation("UserContactedBy", fields: [contactId], references: [id], onDelete: Cascade)

  // This is the user who owns the contact.
  owner User @relation("UserContact" ,fields: [userId], references: [id], onDelete: Cascade)

  // ensures that one user can't save the other user as contact more than once
  @@unique([userId, contactId])
}

enum ConversationType {
  GROUP
  ONE_TO_ONE
}

model Conversation {
  id String @id @default(uuid())

  // we will treat name as group_name in the case of group_chat else htis field does not matter in the case of one-to-one chat
  name String
  
  // will work as a group_imag in a group chat
  image String?

  type ConversationType @default(ONE_TO_ONE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // one participant can join many conversations and one conversation can have multiple participants
  participants Participant[] @relation("ManyParticipantsToManyConversations")
  messages Message[]
}

enum ParticipantStatus {
  ADMIN
  MEMBER
  BLOCKED
  LEFT
  KICKED_OUT
  // in the case of deleting the chat after leaving the chat we will just delete the Participant entry.
}

model Participant {
  id String @id @default(uuid())
  userId String @unique
  
  // This status field will help for authorizaion in group chats
  status ParticipantStatus @default(MEMBER)

  // this represents when this participant joined the conversation
  createdAt DateTime @default(now())

  // will helpful in the case like promoting user from MEMBER to ADMIN
  updatedAt DateTime @updatedAt

  user User @relation("OneUserIsOneParticipant", fields: [userId], references: [participantId])

  // one participant can join many conversations and one conversation can have multiple participants
  conversations Conversation[] @relation("ManyParticipantsToManyConversations")

  // In order to get messages sent by this participant --> Conversation --> Messages
  
}

model Message {
  id String @unique @default(uuid())
  participantId String @unique 
  conversationId String @unique

  contentType String // For this we will restrictly follow the values of Content-Type such as text/plain or image/png

  // it is possible for an message to have both url and text.
  url String?
  text String?

  createdAt DateTime @default(now())

  // So  A message can be deleted by multiple participants of the chat
  deletedBy DeletedMessage[]

  // & we will not allow user to update sent message
 
  // userId is accessable from both Participant and Conversation model
  senderUserId String

  // Basically instead to using 'to' attribute we will use conversation attr to know the recipients of this message.
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([senderUserId, createdAt])
}

model DeletedMessage {
  messageId String @unique

  // My idea is to not a make connection b/w deleted_msgs and partipants or User model for this minor funtionality.
  // this userId will also accessable from participant model So in the case if any participant delete msg from his side we will 
  // create deletedMessage entry 
  userId String

  // A message was deleeted by a user when this entry of this model was created so default = now().
  deletedAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
}


// <---- Specific to Authentication ---!>
model ResetPasswordToken {
  userId String
  createdAt DateTime @default(now())
  token String @id @default(uuid())
  isValid Boolean @default(true)
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// <---- Specific to Authentication ---!>
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}